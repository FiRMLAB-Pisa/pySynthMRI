
@Article{tomography9050137,
AUTHOR = {Peretti, Luca and Donatelli, Graziella and Cencini, Matteo and Cecchi, Paolo and Buonincontri, Guido and Cosottini, Mirco and Tosetti, Michela and Costagli, Mauro},
TITLE = {Generating Synthetic Radiological Images with PySynthMRI: An Open-Source Cross-Platform Tool},
JOURNAL = {Tomography},
VOLUME = {9},
YEAR = {2023},
NUMBER = {5},
PAGES = {1723--1733},
URL = {https://www.mdpi.com/2379-139X/9/5/137},
ISSN = {2379-139X},
ABSTRACT = {Synthetic MR Imaging allows for the reconstruction of different image contrasts from a single acquisition, reducing scan times. Commercial products that implement synthetic MRI are used in research. They rely on vendor-specific acquisitions and do not include the possibility of using custom multiparametric imaging techniques. We introduce PySynthMRI, an open-source tool with a user-friendly interface that uses a set of input images to generate synthetic images with diverse radiological contrasts by varying representative parameters of the desired target sequence, including the echo time, repetition time and inversion time(s). PySynthMRI is written in Python 3.6, and it can be executed under Linux, Windows, or MacOS as a python script or an executable. The tool is free and open source and is developed while taking into consideration the possibility of software customization by the end user. PySynthMRI generates synthetic images by calculating the pixelwise signal intensity as a function of a set of input images (e.g., T1 and T2 maps) and simulated scanner parameters chosen by the user via a graphical interface. The distribution provides a set of default synthetic contrasts, including T1w gradient echo, T2w spin echo, FLAIR and Double Inversion Recovery. The synthetic images can be exported in DICOM or NiFTI format. PySynthMRI allows for the fast synthetization of differently weighted MR images based on quantitative maps. Specialists can use the provided signal models to retrospectively generate contrasts and add custom ones. The modular architecture of the tool can be exploited to add new features without impacting the codebase.},
DOI = {10.3390/tomography9050137}
}



